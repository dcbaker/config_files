" XDG stuff {{{1
set backupdir=$XDG_CACHE_HOME/vim/backup//
set directory=$XDG_CACHE_HOME/vim/swap//
set undodir=$XDG_CACHE_HOME/vim/undo//
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set rtp+=$XDG_CONFIG_HOME/vim
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" Vundle {{{1
" Setup {{{2
filetype off

set rtp+=$XDG_DATA_DIR/vim/bundle/Vundle.vim
call vundle#begin(expand('$XDG_DATA_DIR').'/vim/bundle')

" Use vundle to manage plugins
Plugin 'VundleVim/Vundle.vim'

" Plugins {{{2
" These add extensive features to vim, not just syntax highlighting or
" coloschemes
Plugin 'tpope/vim-fugitive'
Plugin 'sjl/gundo.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'scrooloose/nerdcommenter'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'davidhalter/jedi-vim'
Plugin 'FelikZ/ctrlp-py-matcher'
Plugin 'thinca/vim-localrc'
Plugin 'editorconfig/editorconfig-vim'
" Orgmode {{{3
" and it's dependencies 
Plugin 'vim-scripts/utl.vim'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-speeddating'
Plugin 'jceb/vim-orgmode'

" Syntax {{{2
Plugin 'kurayama/systemd-vim-syntax'
Plugin 'hdima/python-syntax' 
Plugin 'tpope/vim-git'
Plugin 'elzr/vim-json' 
Plugin 'scrooloose/syntastic'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'Keithbsmiley/rspec.vim'
Plugin 'rid9/vim-fstab'
Plugin 'jnwhiteh/vim-golang'
Plugin 'tikhomirov/vim-glsl'
Plugin 'dcbaker/piglit-vim.git'
Plugin 'dcbaker/mako.vim'
Plugin 'rust-lang/rust.vim'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'anntzer/vim-cython.git'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'chaimleib/vim-renpy'

" Color Schenes {{{2
Plugin 'nanotech/jellybeans.vim'

" Teardown {{{2
call vundle#end()

" Make powerline work
let g:powerline_pycmd="py3"

" Settings {{{1
set laststatus=2
set background=dark				" cuz who uses light colored consoles?
set nowrap						" in general we dont want wrap
set nopaste						" dont screw with formatting if not pasting
set number						" very useful
set ruler						" ^this
set nocompatible				" this is vim, not vi
set modeline					" this can be a security problem, but its dang useful
set autoindent					" who doesn't like autoindent
set autowrite					" autowrite on next, I forget a lot
set expandtab					" expand tabs to spaces
set tabstop=4					" set a resonable tabstop, 8 is not reasonable
set shiftwidth=4				" set a reasonable shiftwidth, 8 is not reasonable
set backspace=indent,eol,start	" make backspace work like a reasonable system
set history=50					" keep only 50 lines of history
set hlsearch					" search with hilight
set omnifunc=					" do not use omnifunc
set foldmethod=syntax 			" Syntax folding by default, change it in the ftplugins
set exrc                        " Load project .vimrc files
set secure                      " disable unsafe commands in project .vimrc
set backup " create backups, but put them in a backup folder
" This allows for visual identification of whitespace
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
syntax on 						" turn syntax highlighting on
filetype indent plugin on		" do indent and plugins based on filetype

" Folding {{{1
let g:sh_fold_enabled=3
let g:vim_markdown_conceal = 0

" Plugin Configuration {{{1

" UltriSnips {{{2
let g:UltiSnipsExpandTrigger="<Leader>i"
let g:UltiSnipsListSnippets="<Leader>l"

" Syntastic {{{2
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_aggregate_errors=1

" Editor Config {{{2
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" pymatcher {{{2
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" Tagbar {{{2
nmap <f8> :TagbarToggle<CR>

" Other {{{1
" Use cool colors if it's supported by the terminal
if &term =~ "xterm"
	set t_Co=256 " Konsole workaround
	set t_Sb=[4%dm
	set t_Sf=[3%dm
endif

" Using VIM in tmux can have some unexpected issues.
" This attempts to fix it
if &term == "screen-256color"
	set t_Co=256 " Konsole workarond
	set t_Sb=[4%dm
	set t_Sf=[3%dm
	map <Esc>OH <Home>
	map! <Esc>OH <Home>
	map <Esc>OF <End>
	map! <Esc>OF <End>
endif

colorscheme jellybeans

" Change the arrow keys to navigate lines, even if they're wrapped
map <silent> <Up> gk
imap <silent> <Up> <C-o>gk
map <silent> <Down> gj
imap <silent> <Down> <C-o>gj

" If it's possible switch to UTF-n encoding
" For using larger than UTF-8 we will need the bomb (which turns on the BOM)
" however, we don't want to use BOM on UTF-8, since script files with #!
" will break badly with a BOM
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=utf-8,latin1
endif

" vim: foldmethod=marker
